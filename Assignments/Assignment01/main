# Name: James R. Laurita
# Date: 2.13.2022
# Assignment01: Setting up Part 1 of Minesweeper
# Description: Using the skills we have learned in class to creat rows and columns for a Minesweeper program.

def main():
    import turtle
    import math
    import random

    # Decloration of variables
    windowWidth = 800
    windowHeight = 800
    columns = 10
    rows = 10
    width = 30
    height = 30

    # Create the boundaries for the turtle window
    x = -(columns * width / 2)
    safeX = x
    y = rows * height / 2
    turtle.setup(windowWidth, windowHeight)
    win = turtle.Screen()
    win.bgcolor("teal")

    # .gif name assignment and registration with the turtle window.
    for b in range(0, 13):
        if b <= 9:
            num = str(b)
            name = str(num + ".gif")
            # print(name)                            # Print statement left for debugging
            win.register_shape(name)
        elif b == 10:
            name = "A.gif"
            win.register_shape(name)
        elif b == 11:
            name = "B.gif"
            win.register_shape(name)
        else:
            name = "C.gif"
            win.register_shape(name)

    # Turtle creation
    mineCrafter = turtle.Turtle()
    mineCrafter.hideturtle()
    mineCrafter.speed(0)

    # Turtle implementation
    for r in range(rows):

        # Within each row a column place will be assigned a shape using the iteration number of c in
        #   the range of number of columns. (0.gif through 9.gif as there are only 10 columns).

        # The .gif is then displayed on the screen and x is incremented by the width, it is returned to its
        #   original value after the column for loop is broken out of. y is decremented by the height.
        for c in range(columns):
            mineCrafter = turtle.Turtle()
            mineCrafter.hideturtle()
            mineCrafter.speed(0)

            num = str(c)
            name = str(num + ".gif")
            mineCrafter.shape(name)
            mineCrafter.pu()
            mineCrafter.goto(x,y)
            mineCrafter.showturtle()
            x += int(width)
        y -= height
        x = safeX

    # Initial for statement creating covers to go over the created turtle pattern.
    for cover in range(int(rows * columns / 4)):

        # Random numbers chosen between 0 and number of rows/columns - 1 (in this case, 9) and
        #   the chosen number is used to calculate a random x or y coordinate.
        a = random.randint(0, rows - 1)
        b = random.randint(0, columns - 1)

        pointX = int(b * width - columns * width / 2)
        pointY = int(rows * height / 2 - a * height)

        # Turtle object created
        coverCrafter = turtle.Turtle()
        coverCrafter.hideturtle()
        coverCrafter.speed(0)
        # print(pointX)                              # Print statement left for debugging

        # Cover image is chosen using the remainder of dividing the random point value for y by
        #   3. (results will be either 0, 1 or 2)
        coverSelector = a % 3
        # print(coverSelector)                       # Print statement left for debugging

        # Depending on results of coverSelector a coverImage will be assigned to the turtle and the
        #   image will be overlaid on top of the original pattern at the randomly chosen coordinates.
        if coverSelector == 0:
            coverImage = "A.gif"
            coverCrafter.shape(coverImage)
            coverCrafter.pu()
            coverCrafter.goto(pointX, pointY)
            coverCrafter.showturtle()
        elif coverSelector == 1:
            coverImage = "B.gif"
            coverCrafter.shape(coverImage)
            coverCrafter.pu()
            coverCrafter.goto(pointX, pointY)
            coverCrafter.showturtle()
        else:
            coverImage = "C.gif"
            coverCrafter.shape(coverImage)
            coverCrafter.pu()
            coverCrafter.goto(pointX, pointY)
            coverCrafter.showturtle()

    turtle.mainloop()

if __name__ == "__main__":
    main()
